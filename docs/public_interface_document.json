{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application follows the Stacked architecture and provides a set of core features, including a todo list, dialog and bottom sheet management, and navigation. The app allows users to manage their todo items, view information alerts, and interact with custom UI components.",
  "architecture_overview": "The application is structured using the Stacked architecture, which separates the concerns of the UI, view models, and services. It utilizes Stacked for state management, routing, and dependency injection. The codebase is organized into logical feature folders, with separate files for views, view models, models, and utilities. This structure promotes modularization and makes it easy to add new features and functionality to the app.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file is responsible for managing the localization and internationalization (i18n) functionality of the Flutter application. It acts as a central hub, exporting the necessary components for handling localized strings, supported locales, and localization-related utilities.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/features/todo/models/todo.dart",
      "description": "This Dart file defines the `Todo` class, which represents a single task or item in a to-do list application. The `Todo` class encapsulates the key attributes and behavior of a to-do item, providing a centralized model for managing and manipulating to-do tasks.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +Todo copyWith()\n  +List<Object?> get props()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the specified changes to the properties, allowing for easy modification of existing `Todo` objects.",
          "parameters": [
            "String? id",
            "String? title",
            "String? description",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "get props",
          "description": "Returns a list of the `Todo` object's properties, which is used by the `Equatable` package to provide value-based equality comparison between `Todo` instances.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "The TodoItem class is responsible for rendering a single todo item in a list. It provides the core functionality for displaying and managing the state of a todo item, including whether it is completed or not, and allowing the user to delete the item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  -Todo todo\n  -Function(bool?) onToggleComplete\n  -VoidCallback onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for a single todo item, including a checkbox to toggle the completion state, the title and description of the todo, and a delete button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/features/todo/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The AddTodoSheet class is responsible for providing a bottom sheet UI component that allows users to add new todo items to a todo list. It provides a form with input fields for the todo title and description, and handles the saving of the new todo item.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  -TextEditingController _titleController\n  -TextEditingController _descriptionController\n  -GlobalKey<FormState> _formKey\n  +AddTodoSheet(completer, request)\n  +State<AddTodoSheet> createState()\n}\n\nclass _AddTodoSheetState extends State<AddTodoSheet> {\n  +dispose()\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "AddTodoSheet",
          "description": "Constructor for the AddTodoSheet widget, which takes a completer function and a SheetRequest object as parameters.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "createState",
          "description": "Creates the state object for the AddTodoSheet widget.",
          "parameters": null,
          "return_type": "State<AddTodoSheet>"
        },
        {
          "name": "dispose",
          "description": "Disposes of the TextEditingControllers used in the form.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoSheet widget, which includes a form with input fields for the todo title and description, as well as buttons to cancel or add the new todo item.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It provides a single entry point for initializing the app and configuring its environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main function that bootstraps the Flutter application. It sets up the app's environment, initializes the locator, dialog UI, and bottom sheet UI, and then runs the main app widget.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing the application's color palette, ensuring consistent and cohesive visual styling across the entire system.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet UI component with a notice or alert message. It is part of the UI layer of the application, specifically handling the presentation of notice-related content.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel extends ViewModel {\n}\n\nNoticeSheet --> NoticeSheetModel : uses\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "Constructor for the `NoticeSheet` class. It takes two required parameters: `completer` and `request`.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for creating the UI of the `NoticeSheet` widget. It takes the `BuildContext`, the `NoticeSheetModel` instance, and an optional `child` widget as parameters, and returns the final UI widget.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating the `NoticeSheetModel` instance, which is used to power the logic and data within the `NoticeSheet` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class provides the view model for a bottom sheet component that displays a notice or alert to the user. It extends the BaseViewModel class from the stacked package, which provides a foundation for building MVVM-style view models.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n}\nNoticeSheetModel --(> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding view classes, and provides helper methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +routes: List<RouteDef>\n  +pagesMap: Map<Type, StackedRouteFactory>\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +navigateToHomeView(): Future<dynamic>\n  +navigateToStartupView(): Future<dynamic>\n  +replaceWithHomeView(): Future<dynamic>\n  +replaceWithStartupView(): Future<dynamic>\n}\n@enduml",
      "methods": [
        {
          "name": "Routes.all",
          "description": "A set of all the available routes in the application.",
          "parameters": null,
          "return_type": "Set<String>"
        },
        {
          "name": "StackedRouter.routes",
          "description": "A list of route definitions, which map the route names to the corresponding view classes.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "StackedRouter.pagesMap",
          "description": "A map of view classes to their corresponding route factory functions, which create the appropriate page navigation widgets.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "NavigatorStateExtension.navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/delete_todo/delete_todo_dialog.dart",
      "description": "The `DeleteTodoDialog` class is responsible for displaying a confirmation dialog to the user when they want to delete a todo item. It provides a reusable way to handle the deletion process, ensuring the user intends to delete the todo and allowing them to cancel the operation if desired.",
      "class_diagram": "@startuml\nclass DeleteTodoDialog {\n  +DialogRequest request\n  +Function(DialogResponse) completer\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the delete todo dialog, including the title, description, and buttons for confirming or canceling the deletion.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter app built using the MVVM (Model-View-ViewModel) architecture.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is the primary UI component responsible for rendering the home screen of the application. It provides a simple interface for displaying a counter value and allowing the user to interact with it by incrementing the counter, as well as displaying a dialog and a bottom sheet.",
      "class_diagram": "```plantuml\nclass HomeView extends StackedView<HomeViewModel> {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +get counterLabel: String\n}\n```",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including the counter value, buttons to increment the counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to the `StackedView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the application. It provides the core functionality for internationalization and localization, ensuring the app can be easily translated into different languages.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Retrieves the list of localization delegates for the application, which are responsible for loading the translations for the supported locales.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Retrieves the list of supported locales for the application, which defines the languages the app can be displayed in.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "package:flutter/widgets.dart",
        "package:flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and constants that help with the layout and styling of the Flutter UI. It offers a consistent and responsive way to manage spacing, font sizes, and screen dimensions across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: SizedBox\n  + const horizontalSpaceSmall: SizedBox\n  + const horizontalSpaceMedium: SizedBox\n  + const horizontalSpaceLarge: SizedBox\n  + const verticalSpaceTiny: SizedBox\n  + const verticalSpaceSmall: SizedBox\n  + const verticalSpaceMedium: SizedBox\n  + const verticalSpaceLarge: SizedBox\n  + const verticalSpaceMassive: SizedBox\n  + const spacedDivider: Column\n  + verticalSpace(double height): SizedBox\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the screen width in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the screen width in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the screen width in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value suitable for medium-sized screens.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive font size suitable for small text on the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive font size suitable for medium text on the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive font size suitable for large text on the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive font size suitable for extra-large text on the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive font size suitable for massive text on the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the application's user interface. It is responsible for setting up the overall app structure, including the initial route, navigation, and internationalization.",
      "class_diagram": "@startuml\nclass AppView {\n  +Widget build(BuildContext, AppViewModel)\n}\n\nclass _App {\n  +Widget build(BuildContext, AppViewModel)\n}\n\nAppView --> _App\n_App --> MaterialApp\n_App --> GestureDetector\n_App --> MediaQuery\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the root widget of the application, which is a `MaterialApp` with various configurations and observers.",
          "parameters": [
            "BuildContext",
            "AppViewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for handling the initial startup logic and navigation of the application. It is part of the MVVM (Model-View-ViewModel) architecture and is used to manage the state and behavior of the startup view.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  + Future<void> runStartupLogic()\n}\n\nStartupViewModel --> NavigationService\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes the startup logic for the application. This method is responsible for delaying the startup process for 3 seconds and then replacing the current view with the home view.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "app/app.locator.dart",
        "app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for displaying the initial startup screen of the application. It is the entry point for the user when the app is launched, providing a loading indicator and the app's name while the app's core functionality is initialized in the background.",
      "class_diagram": "@startuml\nclass StartupView implements StackedView<StartupViewModel> {\n  + builder(BuildContext, StartupViewModel, Widget?)\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel)\n}\n\nclass StartupViewModel {\n  + runStartupLogic()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's name and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to power the startup screen logic.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers the execution of the startup logic when the view model is ready.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This Dart file contains a collection of constants and configuration values used throughout the application. It serves as a centralized repository for commonly used application-wide settings, paths, and default values.",
      "class_diagram": "Not Applicable (No Classes)",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email applications from the mobile app. This allows users to easily contact the app's support team or other contacts directly from the app.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application with a pre-filled phone number and optional message text. Handles the platform-specific differences in the WhatsApp URL scheme.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with a pre-filled email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time values in the application. It handles converting various date/time representations (Timestamp, String, DateTime) to a consistent DateTime object, which is essential for properly storing and retrieving date-based data.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (Timestamp, String, or DateTime) to a consistent DateTime object, or returns null if the value is null.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines an `APIException` class, which is an exception parent class used to handle and communicate unwanted exceptions that may occur within the API service layer of the application.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class, which takes an optional `message` parameter of type `dynamic`.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString()` method, which returns a string representation of the `APIException` instance, including the runtime type and the `message` value.",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This file provides a custom extension on the `Color` class in Flutter, allowing developers to easily create `Color` objects from hexadecimal color codes. It solves the problem of having to manually parse and convert hexadecimal strings to `Color` objects, which is a common requirement in UI development.",
      "class_diagram": "@startuml\nclass Color {\n  +static fromHex(String hexColorString): Color\n  +static intFromHex(String hexColorString): int\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color code string (with or without a leading '#') to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color code string (with or without a leading '#') to an integer representation of the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file contains the implementation of the `InfoAlertDialog` class, which is responsible for displaying an informational alert dialog in the application. This dialog is used to provide users with important information or notifications, typically in response to a specific user action or event in the app.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog({required this.request, required this.completer})\n  +builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog o-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "This method builds the UI for the InfoAlertDialog, which includes a title, description, and a graphic icon. It also includes a 'Got it' button that the user can tap to dismiss the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "This method creates an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "The Flavors class is responsible for managing the current app flavor, which determines the configuration and behavior of the application. It provides a centralized way to access and check the active flavor, enabling the application to behave differently based on the selected environment (e.g., development, production).",
      "class_diagram": "@startuml\nclass Flavors {\n  - Flavors._()\n  + factory Flavors()\n  + static Flavor? flavor\n  + static bool get isDev\n  + static bool get isProd\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, enforcing singleton pattern.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "factory Flavors",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "flavor",
          "description": "Static property that stores the current app flavor.",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "isDev",
          "description": "Static getter that returns true if the current flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Static getter that returns true if the current flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The `JsonUtil` class provides utility methods for working with JSON data in a Dart/Flutter application. It helps to handle common JSON formatting and conversion tasks, ensuring consistent and reliable handling of JSON data throughout the application.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic> json)\n  +static T? fromJsonOrNull<T>(dynamic json, T Function(Map<String, dynamic>) fromJson)\n  +static List<T> formatListMap<T>(List<dynamic> json, T Function(Map<String, dynamic>) fromJson)\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic>, ensuring that all keys are Strings.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts a dynamic JSON value to a typed object of type T, or returns null if the input is null or not a Map.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON maps to a List<T>, where each element is created by applying the provided fromJson function to the formatted map.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up and managing the bottom sheet UI within the application. It provides a centralized location for registering and configuring the different types of bottom sheets that can be shown to the user.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders and registers them with the BottomSheetService. This allows the application to display different types of bottom sheets throughout the UI.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the state and CRUD operations of todo items in the application. It provides a centralized interface for interacting with the todo data, abstracting away the underlying data storage and synchronization details.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  + Future<List<Todo>> getTodos()\n  + Future<void> addTodo(Todo todo)\n  + Future<void> updateTodo(Todo todo)\n  + Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of all todo items.",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "lib/features/todo/models/todo.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is responsible for managing the state and business logic of a todo list feature in the application. It handles the retrieval, creation, updating, and deletion of todo items, as well as providing functionality to display and interact with the todo list.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  + loadTodos(): Future<void>\n  + addTodo(title: String, description: String): Future<void>\n  + toggleTodoComplete(todo: Todo): Future<void>\n  + deleteTodo(todo: Todo): Future<void>\n  + showAddTodoSheet(): Future<void>\n  - _todoRepository: TodoRepository\n  - _bottomSheetService: BottomSheetService\n  - _dialogService: DialogService\n  - _todos: List<Todo>\n}\n@enduml",
      "methods": [
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todos from the TodoRepository and updates the _todos property.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the provided title and description, adds it to the TodoRepository, and updates the todo list.",
          "parameters": [
            "title: String",
            "description: String"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Updates the completion status of the provided todo item in the TodoRepository and refreshes the todo list.",
          "parameters": [
            "todo: Todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Displays a confirmation dialog, and if confirmed, deletes the provided todo item from the TodoRepository and updates the todo list.",
          "parameters": [
            "todo: Todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "showAddTodoSheet",
          "description": "Displays a bottom sheet to allow the user to enter a new todo item, and then adds the new todo to the TodoRepository and updates the todo list.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/app/app.locator.dart",
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/features/todo/models/todo.dart",
        "my_app/features/todo/todo_repository.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for an analytics implementation, which encapsulates the details of the analytics provider and exposes a simple, consistent interface for the rest of the application to use.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init()\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the analytics service, preparing it for use.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file contains the configuration options for the Firebase services used in the production environment of the application. It provides the necessary information to initialize and connect to the Firebase platform, enabling the app to leverage Firebase's suite of services such as authentication, real-time database, and cloud storage.",
      "class_diagram": "",
      "methods": [
        {
          "name": "FirebaseOptions",
          "description": "This is the constructor for the FirebaseOptions class, which is used to hold the configuration settings for the Firebase services. It takes in the necessary parameters to set up the Firebase project, including the API key, project ID, storage bucket, and messaging sender ID.",
          "parameters": [
            "apiKey",
            "appId",
            "messagingSenderId",
            "projectId",
            "storageBucket"
          ],
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "firebase_database",
        "firebase_storage"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the development environment of the application. It defines the necessary credentials and settings required to connect and interact with the Firebase services.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "firebase_database",
        "firebase_storage"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The `ScreenObserver` class is responsible for tracking screen views in the application and reporting them to the `AnalyticService`. It acts as a `NavigatorObserver` to intercept navigation events and record the current screen being displayed.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  - _trackScreenView(Route<dynamic> route)\n  - _defaultRouteFilter(Route<dynamic>? route)\n  - _defaultNameExtractor(RouteSettings settings)\n}\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Callback method that is invoked when a new route is pushed onto the navigator.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Callback method that is invoked when a route is replaced with a new route.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Callback method that is invoked when a route is popped from the navigator.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Internal method that extracts the screen name from the route settings and sends it to the AnalyticService for tracking.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        },
        {
          "name": "_defaultRouteFilter",
          "description": "Internal method that determines whether a route should be tracked based on the route name.",
          "parameters": [
            "Route<dynamic>? route"
          ],
          "return_type": "bool"
        },
        {
          "name": "_defaultNameExtractor",
          "description": "Internal method that extracts the screen name from the route settings.",
          "parameters": [
            "RouteSettings settings"
          ],
          "return_type": "String?"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialog UI in the application. It provides a centralized way to register and handle different types of dialogs, ensuring a consistent user experience across the app.",
      "class_diagram": "@startuml\nclass DialogService {\n  +registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nclass DialogBuilder {\n  +call(BuildContext, DialogRequest, Function)\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(DialogRequest, Function)\n}\n\nDialogService -down-> DialogBuilder\nDialogBuilder -down-> InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the custom dialog UI by registering the available dialog types and their corresponding builders with the DialogService.",
          "parameters": [
            "none"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and logic associated with the home screen of the application. It serves as the ViewModel component in the MVVM (Model-View-ViewModel) architectural pattern, providing the necessary functionality and data to the corresponding home screen View.",
      "class_diagram": "@startuml\nclass HomeViewModel extends BaseViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + get counterLabel(): String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the updated state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description, providing an informative message to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description, providing an additional interface for the user to interact with.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an enumeration called `Flavor` that represents the different flavors or environments of the application, namely 'production' and 'development'. This enum is used to manage and differentiate the application's behavior based on the current environment.",
      "class_diagram": "@startuml\n  enum Flavor {\n    production\n    development\n  }\n  @enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Stacked architecture-based Flutter application. The service locator is a central registry that allows different parts of the application to access and use various services and dependencies.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method sets up the service locator by registering various services and dependencies. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the `BuildContext` class, which simplifies the process of accessing the current `AppLocalizations` instance. It serves as a utility to streamline the internationalization and localization functionality in the Flutter application.",
      "class_diagram": "@startuml\nclass BuildContext {\n  +AppLocalizations localizations\n}\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance from the `BuildContext`.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "The main entry point for the production version of the application. This file is responsible for bootstrapping the app and configuring it to run in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function that initializes the application. It calls the `bootstrap` function, which sets up the app with the appropriate configuration for the production environment.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the application. It sets up the entry point of the app and configures the application environment for the development flavor.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function serves as the entry point of the application. It calls the bootstrap function to initialize the app with the development flavor and the AppView as the root widget.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "This Dart file contains the `TodoView` class, which is responsible for rendering the user interface for a todo list application. It provides a visual representation of the user's todo items and allows them to interact with the list, such as marking items as complete or deleting them.",
      "class_diagram": "@startuml\nclass TodoView extends StackedView<TodoViewModel> {\n  +builder(BuildContext, TodoViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): TodoViewModel\n}\n\nclass TodoViewModel {\n  +todos: List<Todo>\n  +isBusy: bool\n  +toggleTodoComplete(Todo): void\n  +deleteTodo(Todo): void\n  +showAddTodoSheet(): void\n}\n\nclass Todo {\n  +id: String\n  +title: String\n  +completed: bool\n}\n\nclass TodoItem {\n  +todo: Todo\n  +onToggleComplete(bool): void\n  +onDelete(): void\n}\n\nTodoView --> TodoViewModel\nTodoView --> TodoItem\nTodoViewModel --> Todo\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the TodoView based on the state of the TodoViewModel.",
          "parameters": [
            "BuildContext",
            "TodoViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the TodoViewModel to be used by the TodoView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/features/todo/widgets/todo_item.dart",
        "package:gap/gap.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoView\nparticipant TodoViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (increment counter, show dialog, show bottom sheet)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\nUser -> TodoView: Navigate to todo list\nTodoView -> TodoViewModel: Initialize\nTodoViewModel -> TodoView: Provide todo items\nUser -> TodoView: Interact (toggle todo, delete todo, add new todo)\nTodoView -> TodoViewModel: Handle user actions\nTodoViewModel -> TodoView: Update UI\nTodoViewModel -> BottomSheetService: Show add todo bottom sheet\nTodoViewModel -> DialogService: Show delete todo dialog\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each feature (Home, Todo) has a corresponding ViewModel class that encapsulates the business logic and state for that feature. The ViewModels expose observables and methods that the Views can bind to, allowing the UI to be updated automatically when the state changes. Dependency injection, handled by the app.locator.dart file, ensures that the ViewModels have access to the necessary services (e.g., DialogService, BottomSheetService) to perform actions and update the state.",
  "navigation_flow": "The navigation flow of the application is managed using the Stacked Router, defined in the app.router.dart file. The AppView sets up the initial route, which is the StartupView. After the startup logic is completed, the user is navigated to the HomeView. From the HomeView, the user can navigate to the TodoView by interacting with a button or menu item. The Stacked Router handles the transitions between views and manages the navigation stack."
}