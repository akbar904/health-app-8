{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application follows the Stacked architecture and provides a set of features for managing a todo list. Users can view, create, update, and delete todo items. The app also includes functionality for displaying custom dialogs and bottom sheets, as well as integration with analytics services.",
  "architecture_overview": "The application is structured around the Stacked architecture, which separates the presentation logic (Views), business logic (ViewModels), and data/service layers. The app utilizes the Stacked package for state management, routing, and dependency injection. Key components include the AppView, HomeView, StartupView, and their corresponding ViewModels. The app also leverages custom dialogs and bottom sheets, as well as an AnalyticService for tracking screen views.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file defines the Firebase configuration options for the production environment of the application. It provides the necessary credentials and settings to connect the application to the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "cloud_firestore"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the development environment of the application. It defines the necessary credentials and settings to connect and interact with the Firebase services, such as Cloud Firestore, Authentication, and Storage, during the development phase of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "firebase_options",
          "description": "This method returns a FirebaseOptions object that encapsulates the Firebase configuration details for the development environment. It includes the necessary information, such as the project ID, API key, application ID, and other relevant settings, to ensure the proper integration and operation of Firebase services within the development version of the application.",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for a list of TodoModel objects. It serves as the central repository and manager for the todo items in the application.",
      "class_diagram": "@startuml\n  class TodoService {\n    - _todos: List<TodoModel>\n    + get todos: List<TodoModel>\n    + addTodo(todo: TodoModel): void\n    + updateTodo(todo: TodoModel): void\n    + deleteTodo(id: String): void\n    + getTodoById(id: String): TodoModel?\n  }\n  @enduml",
      "methods": [
        {
          "name": "get todos",
          "description": "Returns an unmodifiable list of all the todo items",
          "parameters": null,
          "return_type": "List<TodoModel>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new TodoModel to the list of todos",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "void"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing TodoModel in the list of todos",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "void"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a TodoModel from the list of todos by its id",
          "parameters": [
            "String"
          ],
          "return_type": "void"
        },
        {
          "name": "getTodoById",
          "description": "Retrieves a TodoModel from the list of todos by its id",
          "parameters": [
            "String"
          ],
          "return_type": "TodoModel?"
        }
      ],
      "dependencies": [
        "package:my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is a view model for a bottom sheet UI component responsible for displaying a notice or alert to the user.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is responsible for providing a wrapper around the application's analytics functionality. It encapsulates the implementation details of the analytics service, allowing the rest of the application to interact with a consistent interface without needing to know the underlying details.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  +init(): Future<void>\n}\n\nInitializableDependency <|-- AnalyticService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, performing any necessary setup or configuration.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant colors that are used throughout the Flutter application. It provides a centralized location to manage and access the application's color palette, promoting consistency and maintainability.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of the information alert dialog component in the application's user interface.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_form/todo_form_dialog.dart",
      "description": "The TodoFormDialog is responsible for presenting a modal dialog that allows the user to create or edit a todo item. It provides a user interface for entering the todo title, description, and due date, and handles the submission of the form data.",
      "class_diagram": "@startuml\nclass TodoFormDialog extends StatefulWidget {\n  final DialogRequest request\n  final Function(DialogResponse) completer\n}\n\nclass _TodoFormDialogState extends State<TodoFormDialog> {\n  final _formKey = GlobalKey<FormState>\n  late TextEditingController _titleController\n  late TextEditingController _descriptionController\n  DateTime? _dueDate\n\n  void initState()\n  void dispose()\n  Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "initState",
          "description": "Initializes the state of the widget, setting up the text editing controllers and due date based on the provided DialogRequest data.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "dispose",
          "description": "Cleans up the text editing controllers when the widget is disposed.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the UI for the TodoFormDialog, which includes a form with title, description, and due date fields, as well as Cancel and Save buttons.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a collection of reusable UI helper functions and constants that facilitate the creation of responsive and visually consistent user interfaces in a Flutter application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const double _tinySize\n  + const double _smallSize\n  + const double _mediumSize\n  + const double _largeSize\n  + const double _massiveSize\n  + const Widget horizontalSpaceTiny\n  + const Widget horizontalSpaceSmall\n  + const Widget horizontalSpaceMedium\n  + const Widget horizontalSpaceLarge\n  + const Widget verticalSpaceTiny\n  + const Widget verticalSpaceSmall\n  + const Widget verticalSpaceMedium\n  + const Widget verticalSpaceLarge\n  + const Widget verticalSpaceMassive\n  + Widget spacedDivider\n  + Widget verticalSpace(double height)\n  + double screenWidth(BuildContext context)\n  + double screenHeight(BuildContext context)\n  + double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + double halfScreenWidth(BuildContext context)\n  + double thirdScreenWidth(BuildContext context)\n  + double quarterScreenWidth(BuildContext context)\n  + double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + double getResponsiveSmallFontSize(BuildContext context)\n  + double getResponsiveMediumFontSize(BuildContext context)\n  + double getResponsiveLargeFontSize(BuildContext context)\n  + double getResponsiveExtraLargeFontSize(BuildContext context)\n  + double getResponsiveMassiveFontSize(BuildContext context)\n  + double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height based on the provided parameters.",
          "parameters": [
            "BuildContext",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Calculates a responsive font size for small text based on the screen width.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width and the provided font size and maximum value.",
          "parameters": [
            "BuildContext",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for defining the navigation routes and generating the corresponding navigation code for a Flutter application built using the Stacked architecture pattern. It provides the core functionality for handling navigation within the app, enabling seamless transitions between different views.",
      "class_diagram": "@startuml\n\nclass StackedRouter {\n  +List<RouteDef> get routes\n  +Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass Routes {\n  +static const homeView\n  +static const startupView\n  +static const all\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n\n@enduml",
      "methods": [
        {
          "name": "get routes",
          "description": "Returns the list of route definitions for the application.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "get pagesMap",
          "description": "Returns a map of page types to their corresponding route factories, which are used to create the appropriate page widgets for each route.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/views/home/home_view.dart",
        "my_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message. It provides a simple and consistent way to present important information to the user within the app's UI.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required this.completer, required this.request})\n  +Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +NoticeSheetModel viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the notice bottom sheet, displaying the title and description provided in the SheetRequest.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which handles the logic and state for the notice bottom sheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized place to define the available languages and the associated localization resources.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns the list of localization delegates used by the application. These delegates are responsible for loading the appropriate translations for the selected locale.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns the list of locales supported by the application. This defines the languages that users can select from.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class represents a single task or to-do item in a todo list application. It encapsulates the essential properties of a todo item, including its unique identifier, title, description, due date, completion status, and creation timestamp. This model class provides a consistent and structured way to work with todo items throughout the application, enabling features like creating, updating, and tracking to-do tasks.",
      "class_diagram": "@startuml\nclass TodoModel {\n  +String id\n  +String title\n  +String description\n  +DateTime? dueDate\n  +bool isCompleted\n  +DateTime createdAt\n  +TodoModel copyWith(...)\n}\n@enduml",
      "methods": [
        {
          "name": "TodoModel",
          "description": "Constructor that creates a new TodoModel instance with the provided properties.",
          "parameters": [
            "id",
            "title",
            "description",
            "dueDate",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with the specified properties modified.",
          "parameters": [
            "title",
            "description",
            "dueDate",
            "isCompleted"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "props",
          "description": "Returns a list of all the properties of the TodoModel instance, used for equality comparison.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main screen of the application. It displays a simple UI with a greeting message, a counter button, and two buttons to show a dialog and a bottom sheet. The class uses the `stacked` package to manage the state and business logic, delegating it to the `HomeViewModel` class.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI of the `HomeView` screen, including the greeting message, counter button, and two buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` class, which handles the business logic and state management for the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is a ViewModel class that is part of the MVVM (Model-View-ViewModel) architectural pattern used in the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    + runStartupLogic(): Future<void>\n  }\n  StartupViewModel -down-> NavigationService\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for executing the initial startup logic of the application. It delays the execution for 3 seconds, and then navigates the user to the HomeView using the NavigationService.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values that are used throughout the application. It serves as a central repository for various configuration settings, file paths, and default data that the app relies on.",
      "class_diagram": "No class diagram, as this is a file of constants and not a class.",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is the view model for the main app UI in the Flutter application. It serves as the central coordinator for managing the application's state and behavior.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void someMethod()\n}\n\nclass BaseViewModel {\n  +void notifyListeners()\n  +void setBusy(bool value)\n}\n\nAppViewModel -up-|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "AppViewModel",
          "description": "The constructor for the AppViewModel class, which extends BaseViewModel.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions to launch WhatsApp and email clients directly from the application. This allows users to easily contact the app's developers or support team.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp client with a pre-filled phone number and optional message text.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email client with a pre-filled email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_list.dart",
      "description": "The TodoList widget is responsible for rendering a list of todo items. It provides functionality to toggle the completion status, delete, and edit individual todo items. This widget is a core component of the app's home screen, where users can manage their daily tasks.",
      "class_diagram": "@startuml\nclass TodoList extends StatelessWidget {\n  -List<TodoModel> todos\n  -Function(bool?, TodoModel) onTodoToggled\n  -Function(TodoModel) onTodoDeleted\n  -Function(TodoModel) onTodoEdited\n  +Widget build(BuildContext context)\n}\n\nclass TodoItem {\n  -TodoModel todo\n  -Function(bool?) onToggled\n  -Function() onDelete\n  -Function() onEdit\n  +Widget build(BuildContext context)\n}\n\nTodoList --> TodoItem : Renders\nTodoList --> TodoModel : Depends on\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoList widget, which displays a list of TodoItem widgets. If the list of todos is empty, it shows a 'No todos yet' message.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/features/home/widgets/todo_item.dart",
        "lib/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time values, particularly when dealing with data from Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  +static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (such as a Firestore Timestamp or a String) to a DateTime object.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines an exception class called `APIException` that is used to handle and communicate unexpected errors that may occur during API service operations.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +toString(): String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class, which takes an optional `message` parameter to store the details of the exception.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString` method, which returns a string representation of the `APIException` instance, including the runtime type and the `message` value.",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "The `Flavors` class in this file is responsible for managing the current app flavor, which determines the environment (development, production, etc.) the app is running in. This is a critical piece of functionality for mobile applications that need to support multiple deployment environments.",
      "class_diagram": "@startuml\nclass Flavors {\n  + factory Flavors()\n  + static Flavor? flavor\n  + static bool get isDev\n  + static bool get isProd\n}\n@enduml",
      "methods": [
        {
          "name": "factory Flavors()",
          "description": "Returns the singleton instance of the `Flavors` class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "static Flavor? flavor",
          "description": "The current app flavor, which can be `Flavor.development`, `Flavor.production`, or `null` if not set.",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "static bool get isDev",
          "description": "Returns `true` if the current app flavor is `Flavor.development`, `false` otherwise.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "static bool get isProd",
          "description": "Returns `true` if the current app flavor is `Flavor.production`, `false` otherwise.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "lib/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides an extension on the `Color` class in Flutter, adding utility methods for working with hexadecimal color representations. The primary purpose of this file is to simplify the process of creating `Color` objects from hexadecimal color strings, which is a common requirement in UI development.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FFFFFF') to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FFFFFF') to an integer representation of the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the application's user interface. It is responsible for setting up the overall application structure, including the navigation system, localization, and handling user interactions.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n_App o-- AppViewModel\n_App o-- StackedService\n_App o-- ScreenObserver\n_App o-- Routes\n\nnote left of _App: Handles overall app setup, including:\n- Navigation\n- Localization\n- Keyboard management\n- Screen observation\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main app widget, which sets up the navigation, localization, and other key functionality.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The `JsonUtil` class in this file provides a set of utility functions for working with JSON data in a Dart/Flutter application. It helps to handle common challenges encountered when parsing and manipulating JSON, ensuring that the data is in the expected format and structure.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  + static Map<String, dynamic> formatMap(Map<dynamic, dynamic> json)\n  + static T? fromJsonOrNull<T>(dynamic json, T Function(Map<String, dynamic>) fromJson)\n  + static List<T> formatListMap<T>(List<dynamic> json, T Function(Map<String, dynamic>) fromJson)\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a `Map<dynamic, dynamic>` to a `Map<String, dynamic>` by removing any keys that are `null`.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic `json` value to an instance of type `T` using a provided `fromJson` function. Returns `null` if the `json` is `null` or not a `Map`.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a `List<dynamic>` of JSON maps to a `List<T>` by applying the provided `fromJson` function to each map after formatting it using `formatMap`.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the Flutter application. It sets up the app's entry point, configures the app's flavor, and starts the main application view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main()",
          "description": "The main entry point of the application. It calls the `bootstrap()` function to initialize the app with the production flavor and the `AppView` as the root widget.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the registration and display of custom dialogs in the Flutter application. It defines the main dialog types used in the app and provides a centralized setup function to register the dialog builders with the DialogService.",
      "class_diagram": "@startuml\n\nclass DialogService {\n    +registerCustomDialogBuilders(builders: Map<DialogType, DialogBuilder>)\n}\n\nenum DialogType {\n    infoAlert\n}\n\nclass InfoAlertDialog {\n    +InfoAlertDialog(request: DialogRequest, completer: DialogCompleter)\n}\n\nDialogService -> DialogType : Registers \ntypes\nInfoAlertDialog -> DialogService : Registered as builder for\n DialogType.infoAlert\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This function is responsible for registering the custom dialog builders with the DialogService. It defines the mapping between the DialogType enum and the corresponding dialog builder functions.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_button.dart",
      "description": "This file defines the `AddTodoButton` widget, which is responsible for rendering a floating action button that allows the user to add a new todo item to the application's todo list.",
      "class_diagram": "@startuml\nclass AddTodoButton extends ViewModelWidget<HomeViewModel> {\n  +build(BuildContext context, HomeViewModel viewModel): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `AddTodoButton` widget, which is a floating action button with an 'add' icon. When the button is pressed, it calls the `addTodo` method on the `HomeViewModel` to add a new todo item.",
          "parameters": [
            "BuildContext",
            "HomeViewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/home/home_viewmodel.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the dependency injection and service locator for the Flutter application. It registers the main services used throughout the app, such as the BottomSheetService, DialogService, and NavigationService, making them globally accessible via the StackedLocator.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method registers the environment and all the necessary dependencies with the StackedLocator. It ensures that the application's core services are available and can be easily accessed from anywhere in the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, configuring the app environment, and setting up the necessary dependencies and services. It serves as the entry point for the application, ensuring a consistent and reliable startup process.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main function that initializes the application, sets up the app environment, and runs the app.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "The TodoItem widget is responsible for rendering a single to-do item in the home screen of the application. It handles the display, state management, and interaction with a single to-do item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +TodoModel todo\n  +Function(bool?) onToggled\n  +VoidCallback onDelete\n  +VoidCallback onEdit\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for a single to-do item, including a checkbox, the title and description, due date, and edit button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for managing the bottom sheet UI components in the application. It provides a centralized setup and configuration for the bottom sheet functionality, making it easy to define and customize the available bottom sheet types.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  +notice\n}\n\nclass NoticeSheet {\n  +NoticeSheet(request, completer)\n}\n\nBottomSheetService -down-> BottomSheetType\nBottomSheetService -down-> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the application. It registers the available bottom sheet types and their corresponding builders, which are used by the BottomSheetService to create and display the appropriate bottom sheets.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file serves as a central hub for managing the localization and internationalization (i18n) functionality of the application. It provides a consolidated interface for accessing the app's localized strings and supported locales.",
      "class_diagram": "@startuml\n\nclass AppLocalizations {\n  +static Future<AppLocalizations> load(Locale locale)\n  +Locale get currentLocale\n  +String get appTitle\n  +String get homeTitle\n  +// Other localized strings\n}\n\nclass LocalizationsExtension {\n  +static AppLocalizations of(BuildContext context)\n}\n\nclass SupportedLocales {\n  +static final List<Locale> supportedLocales\n}\n\nAppLocalizations -- LocalizationsExtension\nAppLocalizations -- SupportedLocales\n\n@enduml",
      "methods": [
        {
          "name": "AppLocalizations.load",
          "description": "Loads the localized strings for the specified locale.",
          "parameters": [
            "Locale locale"
          ],
          "return_type": "Future<AppLocalizations>"
        },
        {
          "name": "AppLocalizations.currentLocale",
          "description": "Returns the current locale of the application.",
          "parameters": null,
          "return_type": "Locale"
        },
        {
          "name": "AppLocalizations.appTitle",
          "description": "Returns the localized app title string.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "AppLocalizations.homeTitle",
          "description": "Returns the localized home screen title string.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "LocalizationsExtension.of",
          "description": "Provides a convenient way to access the AppLocalizations instance from a BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "AppLocalizations"
        },
        {
          "name": "SupportedLocales.supportedLocales",
          "description": "Provides a list of locales supported by the application.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enumeration, `Flavor`, which represents the different flavors or build configurations of the application. It provides a way to differentiate between the production and development environments.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the application. It sets up the initial configuration and entry point for the app, ensuring it runs in the development environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the bootstrap function, which sets up the initial app configuration and renders the root AppView component.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for displaying the initial startup screen of the application. It shows a loading indicator and the app's name while the app's startup logic is executed in the background.",
      "class_diagram": "@startuml\nclass StartupView {\n  +Widget builder(BuildContext, StartupViewModel, Widget?)\n  +StartupViewModel viewModelBuilder(BuildContext)\n  +void onViewModelReady(StartupViewModel)\n}\n\nclass StartupViewModel {\n  +void runStartupLogic()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app name and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready. Triggers the execution of the startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/scheduler.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/startup/startup_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "This file contains the HomeViewModel class, which is responsible for managing the state and functionality of the home screen in a Flutter application. The HomeViewModel is a ViewModel class that follows the MVVM (Model-View-ViewModel) architecture pattern, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  +String get counterLabel\n  +int _counter\n  +void incrementCounter()\n  +void showDialog()\n  +void showBottomSheet()\n}\n\nHomeViewModel o-- DialogService\nHomeViewModel o-- BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "get counterLabel",
          "description": "Returns a string that displays the current value of the counter.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter and rebuilds the UI to reflect the new value.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title, description, and a variant (DialogType.infoAlert).",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title, description, and a variant (BottomSheetType.notice).",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the `BuildContext` class that makes it easier to access the current `AppLocalizations` instance, which is responsible for managing the localization and internationalization of the application's user interface.",
      "class_diagram": "@startuml\n  class BuildContext {\n    +AppLocalizations localizations\n  }\n  @enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current `AppLocalizations` instance, which provides access to the localized strings and other internationalization-related functionality.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "package:flutter/widgets.dart",
        "package:flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is a NavigatorObserver that tracks the screen views in the application using the AnalyticService. It captures navigation events such as pushing, replacing, and popping routes, and then sends the screen view data to the AnalyticService for tracking and reporting.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - _trackScreenView(Route<dynamic> route)\n}\n\nScreenObserver o-- AnalyticService\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced on the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Extracts the screen name from the route settings and sends it to the AnalyticService for tracking.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "Auto-generated entry for lib/ui/dialogs/info_alert/info_alert_dialog.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact with todo list\nHomeView -> HomeViewModel: Handle user actions (add, update, delete todo)\nHomeViewModel -> TodoService: Perform CRUD operations\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. The ViewModels (e.g., HomeViewModel, StartupViewModel) are responsible for managing the state and business logic for their respective views. The ViewModels interact with various services, such as TodoService, DialogService, and BottomSheetService, to handle the application's core functionality. The state is then propagated to the Views, which render the UI based on the current state.",
  "navigation_flow": "The main navigation flow of the application is handled by the Stacked Router, which is defined in the app.router.dart file. The AppView sets up the initial navigation, loading the StartupView. After the startup logic is completed, the user is navigated to the HomeView. From the HomeView, users can interact with the todo list, triggering state changes that are managed by the HomeViewModel. Additional navigation, such as opening dialogs or bottom sheets, is also handled by the ViewModels and the Stacked Services."
}