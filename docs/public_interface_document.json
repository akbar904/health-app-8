{
  "package_name": "com.example_org.my_app",
  "project_description": "A Flutter application that follows the Stacked architecture, featuring a todo list management system. The app allows users to add, view, mark as complete, and delete todo items. It also includes a startup screen, a home screen with a counter and buttons to show a custom dialog and bottom sheet, and basic analytics tracking.",
  "architecture_overview": "The application is structured using the Stacked architecture, which separates concerns into distinct layers: UI, ViewModels, Services, and Repositories. This promotes modularity, testability, and maintainability. The app uses Stacked for state management, routing, and dependency injection. Custom dialogs and bottom sheets are managed through centralized setup in the app.dialogs.dart and app.bottomsheets.dart files.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the production environment of the application. It defines the necessary settings and credentials required to connect and interact with the Firebase services used by the application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/production/firebase_options.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing custom dialogs used throughout the application. It defines the available dialog types, registers the corresponding dialog builders, and provides a centralized setup function to configure the dialog service.",
      "class_diagram": "@startuml\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nDalog .> DialogType\nDialogService *- DialogBuilder\nsetupDialogUi o- DialogService\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the DialogService with the available dialog builders, allowing the application to display custom dialogs.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the state and operations related to a list of Todo items in the application. It provides an abstraction layer for interacting with the Todo data, allowing other parts of the application to access and manipulate the Todo items without directly dealing with the underlying data storage.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  - List<Todo> _todos\n  + List<Todo> getAllTodos()\n  + void addTodo(Todo todo)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getAllTodos",
          "description": "Retrieves a read-only list of all the Todo items managed by the repository.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new Todo item to the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing Todo item in the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a Todo item from the repository based on its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a Todo item in the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "lib/features/todo/todo_model.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the custom bottom sheet UI for the application. It defines the different types of bottom sheets that can be used and provides a centralized location for registering the builders for each type of bottom sheet.",
      "class_diagram": "@startuml\n'- BottomSheetType\n  enum BottomSheetType {\n    notice\n  }\n\n'- setupBottomSheetUi()\n  void setupBottomSheetUi() {\n    final bottomsheetService = locator<BottomSheetService>();\n\n    final Map<BottomSheetType, SheetBuilder> builders = {\n      BottomSheetType.notice: (context, request, completer) =>\n          NoticeSheet(request: request, completer: completer),\n    };\n\n    bottomsheetService.setCustomSheetBuilders(builders);\n  }\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for the application, allowing different types of bottom sheets to be displayed.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an 'Flavor' enum that represents the different application flavors or environments supported by the application, such as 'production' and 'development'.",
      "class_diagram": "@startuml\n  class Flavor {\n    + production\n    + development\n  }\n  @enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This file defines the `Todo` class, which represents a single task or item in a to-do list application. The `Todo` class encapsulates the core data and functionality related to a to-do item, providing a standardized way to manage and interact with these tasks throughout the application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +bool isCompleted\n  +Todo copyWith({String? id, String? title, bool? isCompleted})\n}\n@enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "The constructor for the `Todo` class, which takes in the required `id` and `title` parameters, and an optional `isCompleted` parameter (defaulting to `false`).",
          "parameters": [
            "id",
            "title",
            "isCompleted"
          ],
          "return_type": null
        },
        {
          "name": "copyWith",
          "description": "The `copyWith` method creates a new `Todo` object with the same data, but with the option to override the `id`, `title`, or `isCompleted` properties. This is a common pattern in functional programming to create immutable copies of objects with slight modifications.",
          "parameters": [
            "id",
            "title",
            "isCompleted"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The `ScreenObserver` is responsible for tracking screen views within the Flutter application and reporting them to an `AnalyticService`. It acts as a `NavigatorObserver` to intercept navigation events and extract the screen name, which is then sent to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  - _trackScreenView(Route<dynamic> route)\n  - bool _defaultRouteFilter(Route<dynamic>? route)\n  - String? _defaultNameExtractor(RouteSettings settings)\n}\n\nclass AnalyticService {\n  + trackScreen(String screenName)\n}\n\nScreenObserver --> AnalyticService\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Callback method called when a new route is pushed onto the navigator stack. Tracks the screen view if the route passes the default filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Callback method called when a route is replaced in the navigator stack. Tracks the screen view of the new route if it passes the default filter.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Callback method called when a route is popped from the navigator stack. Tracks the screen view of the previous route if it passes the default filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Internal method that extracts the screen name from the route settings and sends it to the AnalyticService.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        },
        {
          "name": "_defaultRouteFilter",
          "description": "Internal method that checks if the route name is not null and not empty, to determine if the route should be tracked.",
          "parameters": [
            "Route<dynamic>? route"
          ],
          "return_type": "bool"
        },
        {
          "name": "_defaultNameExtractor",
          "description": "Internal method that extracts the screen name from the route settings, handling special cases like bottom sheets.",
          "parameters": [
            "RouteSettings settings"
          ],
          "return_type": "String?"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/repositories/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for todo items in the application. It provides a consistent and reliable interface for interacting with the underlying data storage, abstracting away the implementation details.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  +Future<void> addTodo(String title)\n  +Future<void> toggleTodo(String id)\n  +Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the repository with the given title.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of the todo item with the given ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes the todo item with the given ID from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for Analytics that encapsulates the implementation of analytics functionality in the application. It serves as a centralized point for managing and interacting with the analytics system.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n\nInitializableDependency <|-- AnalyticService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService and prepares it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing of the Flutter application. It defines the main screens or views of the app and provides a centralized way to navigate between them.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  +List<RouteDef> get routes\n  +Map<Type, StackedRouteFactory> get pagesMap\n}\n\ninterface Route {\n  String get path\n  Type get page\n}\n\nclass Routes {\n  +static const homeView\n  +static const startupView\n  +static const todoView\n  +static const all\n}\n\nclass NavigationService {\n  +Future navigateToHomeView()\n  +Future navigateToStartupView()\n  +Future navigateToTodoView()\n  +Future replaceWithHomeView()\n  +Future replaceWithStartupView()\n  +Future replaceWithTodoView()\n}\n@enduml",
      "methods": [
        {
          "name": "StackedRouter",
          "description": "The main router class that manages the navigation and routing of the application.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the home view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the startup view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToTodoView",
          "description": "Navigates to the todo view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current view with the home view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current view with the startup view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithTodoView",
          "description": "Replaces the current view with the todo view of the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/features/home/home_view.dart",
        "my_app/features/startup/startup_view.dart",
        "my_app/features/todo/todo_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the core ToDo-related functionality and business logic in the application. It serves as the primary interface for interacting with ToDo items, providing methods to add, toggle, and delete ToDos.",
      "class_diagram": "@startuml\nclass TodoService {\n  +Future<void> addTodo(String title)\n  +Future<void> toggleTodo(String id)\n  +Future<void> deleteTodo(String id)\n}\n\nTodoService o-- TodoRepository\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new ToDo item to the system with the specified title.",
          "parameters": [
            "title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodo",
          "description": "Toggles the completion status of a ToDo item identified by the provided ID.",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a ToDo item identified by the provided ID from the system.",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "lib/repositories/todo_repository.dart",
        "lib/app/app.locator.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location to manage the app's color palette, making it easy to maintain a consistent visual design.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It serves as the view model for the notice bottom sheet, providing the necessary data and functionality to display and interact with the notice information.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNoticeSheet()\n  +dismissNoticeSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "showNoticeSheet",
          "description": "Presents the notice bottom sheet to the user, displaying relevant information about the notice.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dismissNoticeSheet",
          "description": "Dismisses the currently displayed notice bottom sheet, hiding it from the user interface.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This file contains the InfoAlertDialogModel class, which is responsible for managing the state and behavior of an information alert dialog in the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "None",
          "description": "The InfoAlertDialogModel class does not define any public methods. It extends the BaseViewModel class from the stacked package, which provides the basic functionality for a view model in a MVVM (Model-View-ViewModel) architecture.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_list.dart",
      "description": "The `TodoList` widget is responsible for rendering a list of `TodoItem` widgets, each representing a single task in a todo list. It manages the state and interactions of the todo list, including toggling the completion status of tasks and deleting tasks.",
      "class_diagram": "@startuml\nclass TodoList {\n  -List<Todo> todos\n  -Function(String) onToggle\n  -Function(String) onDelete\n  +build(BuildContext): Widget\n}\n\nclass TodoItem {\n  -Todo todo\n  -Function(String) onToggle\n  -Function(String) onDelete\n  +build(BuildContext): Widget\n}\n\nTodoList *-- TodoItem\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the ListView of TodoItem widgets based on the provided list of Todos.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/features/todo/todo_model.dart",
        "my_app/features/todo/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point of the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and global event handling.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, AppViewModel): Widget\n}\n\nclass _App {\n  +build(context, AppViewModel): Widget\n}\n\nAppView -> _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, and event handling.",
          "parameters": [
            "context",
            "AppViewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is a ViewModel that is responsible for managing the application-level state and functionality in a Flutter application built with the Stacked architecture pattern.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void doSomething()\n}\n\nAppViewModel --|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "doSomething()",
          "description": "Placeholder method that can be implemented to perform any application-level actions or update the application state.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and functionality of the home screen in the application. It provides the core business logic and user interactions for the home view.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Provides the current value of the counter as a formatted string.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the updated state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description, using the DialogService.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description, using the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file is responsible for providing a set of reusable UI helper functions and constants that simplify the development of consistent and responsive user interfaces in a Flutter application. It abstracts away common layout and spacing tasks, allowing developers to focus on the core functionality of their app.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "Provides a vertical space of the given height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Retrieves the width of the current screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the current screen height, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the current screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The StartupView class is responsible for rendering the initial startup screen of the application. It displays a loading animation and the app's title while the application is initializing.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the StartupView, which includes the app's title and a loading animation.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the StartupViewModel, which contains the logic for initializing the app.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Runs the startup logic when the StartupViewModel is ready, which likely includes loading data or performing other initialization tasks.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The HomeView class is responsible for rendering the main user interface of the home screen in the application. It provides a simple counter functionality and buttons to show a dialog and bottom sheet, all managed by the HomeViewModel.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter()\n  +showDialog()\n  +showBottomSheet()\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the HomeView, including a title, a counter button, and buttons to show a dialog and bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the HomeViewModel to be used by the HomeView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It performs necessary tasks and navigates the user to the appropriate view when the application starts up.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  + runStartupLogic(): Future\n  - _navigationService: NavigationService\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method executes the startup logic for the application. It delays for 3 seconds and then navigates the user to the home view.",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching communication channels, such as WhatsApp and email, from a Flutter application. It abstracts away the platform-specific implementation details, allowing the app to easily initiate contact with users through these common communication methods.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or a web-based WhatsApp interface to send a message to the specified phone number, optionally with a pre-filled message.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email client on the device to compose an email to the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized location for managing global configuration and parameters, ensuring consistency and easy maintenance across the codebase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines an exception class `APIException` that is used to handle and propagate exceptions that occur within the API service layer of the application. It provides a standardized way to handle and communicate API-related errors.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  +dynamic message\n  +toString(): String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows passing an optional `message` parameter.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the `toString()` method to provide a string representation of the exception, including the exception type and the message (if available).",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the `Color` class, adding utility methods to convert hexadecimal color strings to `Color` objects and integers.",
      "class_diagram": "@startuml\nclass Color {\n  + static Color fromHex(String hexColorString)\n  + static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g. '#FFFFFF') to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g. '#FFFFFF') to an integer representation of the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "The `Flavors` class in this file is responsible for managing the current app flavor, which determines the environment-specific configuration and behavior of the application. It provides a centralized way to access and check the active app flavor, allowing the application to adapt its functionality accordingly.",
      "class_diagram": "@startuml\nclass Flavors {\n  +factory Flavors()\n  +static Flavor? flavor\n  +static bool get isDev\n  +static bool get isProd\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "isDev",
          "description": "Checks if the current app flavor is the development flavor.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Checks if the current app flavor is the production flavor.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility methods for working with date and time data in the application, particularly when integrating with external data sources like Cloud Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic input value (which could be a Timestamp, String, or DateTime) into a DateTime object, handling different input formats consistently.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class provides utility functions for working with JSON data in the application. It simplifies the process of converting JSON data to and from Dart objects, ensuring consistency and robustness in the application's data handling.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  + static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  + static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  + static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a dynamic JSON map to a strongly-typed Map<String, dynamic>, removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts a dynamic JSON value to a Dart object of type T, using the provided fromJson function. Returns null if the input is null or not a Map.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a list of dynamic JSON values to a list of Dart objects of type T, using the provided fromJson function.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file is responsible for managing the localization and internationalization (i18n) of the Flutter application. It serves as the central hub for accessing and utilizing the application's localized strings, supported locales, and related utilities.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_model.dart",
      "description": "This file defines the `Todo` class, which represents a single task or item in a todo list application. The `Todo` class encapsulates the key properties and functionality required to manage and interact with todo items in the application.",
      "class_diagram": "@startuml\n  class Todo {\n    +String id\n    +String title\n    +bool isCompleted\n    +DateTime createdAt\n    +Todo copyWith({String? id, String? title, bool? isCompleted, DateTime? createdAt})\n  }\n  @enduml",
      "methods": [
        {
          "name": "Todo",
          "description": "The constructor for the `Todo` class, which takes in the required properties of a todo item: `id`, `title`, `createdAt`, and an optional `isCompleted` flag.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "copyWith",
          "description": "A method that creates a new `Todo` instance with one or more properties updated, allowing for easy modifications to an existing todo item.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "Todo"
        },
        {
          "name": "props",
          "description": "An override of the `Equatable` class's `props` getter, which returns a list of the properties that should be used to determine equality between two `Todo` instances.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "The `bootstrap.dart` file is responsible for setting up and bootstrapping the Flutter application. It handles the initialization of the app's essential components, including locator, dialog UI, and bottom sheet UI. This file ensures a consistent and reliable app launch process, enabling the application to function properly across different device configurations and flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The `bootstrap` function is the entry point of the application. It runs the application in a zone-guarded context, sets the app flavor, initializes the WidgetsFlutterBinding, configures the preferred device orientation, sets up the locator, dialog UI, and bottom sheet UI, and then runs the app using the provided `builder` function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_input.dart",
      "description": "The TodoInput widget is responsible for providing a user interface for adding new todo items. It includes an input field and a submit button, allowing users to easily create new todo tasks.",
      "class_diagram": "@startuml\nclass TodoInput extends StatelessWidget {\n  -Function(String) onSubmit\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoInput widget, which includes a text input field and a submit button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the application. It provides a centralized way to define and access the localization-related configuration, which is essential for supporting multiple languages in the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "This getter returns a list of localization delegates, which are responsible for loading the appropriate translations for the app's supported languages.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "This getter returns a list of Locale objects, representing the languages that the app supports.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "package:flutter/widgets.dart",
        "package:flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the Firebase configuration options for the development environment of the application. It sets up the necessary details for connecting to the Firebase services, such as the project ID, API key, and other relevant information.",
      "class_diagram": "@startuml\nclass FirebaseOptions {\n  final String apiKey\n  final String appId\n  final String messagingSenderId\n  final String projectId\n  final String storageBucket\n}\n@enduml",
      "methods": [
        {
          "name": "firebase_options_development",
          "description": "This is the main method that returns the FirebaseOptions instance with the development-specific configuration details.",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the dependency injection and service locator for the application. It is a critical component that enables the application to manage and access various services and dependencies across the codebase.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the application's locator. It allows other parts of the application to access these services through the locator, promoting modularity and testability.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_service.dart",
      "description": "The TodoService class is responsible for managing the core business logic and use cases related to todo items in the application. It serves as the central coordinator between the UI, repository, and model components, providing a high-level API for interacting with todo data.",
      "class_diagram": "@startuml\nclass TodoService {\n  -TodoRepository _repository\n  +List<Todo> getAllTodos()\n  +void addTodo(String title)\n  +void toggleTodoCompletion(String id)\n  +void deleteTodo(String id)\n}\n\nTodoService o-- TodoRepository\n@enduml",
      "methods": [
        {
          "name": "getAllTodos",
          "description": "Retrieves the complete list of todo items from the repository.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the provided title and adds it to the repository.",
          "parameters": [
            "String title"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of the todo item with the specified ID in the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes the todo item with the specified ID from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "lib/features/todo/todo_model.dart",
        "lib/features/todo/todo_repository.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines a custom InfoAlertDialog widget that represents an informational alert dialog for the application. It is responsible for displaying important messages or notifications to the user, with the primary purpose of providing helpful information or guidance.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog({required this.request, required this.completer})\n  +Widget builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child)\n  +InfoAlertDialogModel viewModelBuilder(BuildContext context)\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog --> InfoAlertDialogModel : uses\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the InfoAlertDialog widget, including the title, description, and a custom graphic element. It also includes a 'Got it' button that the user can tap to dismiss the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel, which is used to manage the state and behavior of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations, which is responsible for handling internationalization and localization in the Flutter application.",
      "class_diagram": "@startuml\nclass BuildContext {\n  +AppLocalizations localizations()\n}\n@enduml",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance, which provides access to localized strings and other i18n-related functionality.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "package:flutter/widgets.dart",
        "package:flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "The `TodoItem` widget is responsible for rendering a single todo item in a list. It handles the toggling of the todo's completion status and the deletion of the todo item.",
      "class_diagram": "@startuml\nclass TodoItem {\n  -Todo todo\n  -Function(String) onToggle\n  -Function(String) onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI representation of a single todo item, including a checkbox to toggle the completion status and a delete button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/features/todo/todo_model.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "The main entry point for the development build of the application. This file is responsible for bootstrapping the application and setting the appropriate flavor (development) before rendering the main app view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main()",
          "description": "The main function that is executed when the application is launched. It calls the bootstrap function to initialize the app with the development flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the main entry point of the Flutter application in the production environment. It sets up the necessary configuration and initializes the app's root widget, which is the `AppView`.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function, passing the `AppView` as the builder and the `Flavor.production` as the flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "lib/main/bootstrap.dart",
        "lib/models/enums/flavor.dart",
        "lib/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a notice message. It is used to provide important information or alerts to the user within the application.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  + NoticeSheet({required this.completer, required this.request})\n  + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  + NoticeSheetModel viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class. It takes two required parameters: `completer` (a callback function to handle the sheet's dismissal) and `request` (the `SheetRequest` object containing the title and description to be displayed).",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the bottom sheet. It takes the current `BuildContext`, the `NoticeSheetModel` instance, and an optional child widget as parameters. It returns the `Widget` to be displayed in the bottom sheet.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel` class, which is used to manage the state and logic of the bottom sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "stacked",
        "stacked_services"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is responsible for managing the state and business logic of a todo list application. It provides a user interface-agnostic way to interact with the todo list, allowing other components to leverage its functionality without being directly coupled to the implementation details.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  - TodoService _todoService\n  - List<Todo> _todos\n  + List<Todo> get todos\n  + Future<void> addTodo(String title)\n  + Future<void> toggleTodoCompletion(String id)\n  + Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list by calling the TodoService.addTodo method and notifying listeners of the change.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item by calling the TodoService.toggleTodo method and notifying listeners of the change.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a todo item from the list by calling the TodoService.deleteTodo method and notifying listeners of the change.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/services/todo_service.dart",
        "stacked/stacked.dart",
        "my_app/models/todo.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "This file contains the main UI for the Todo List feature of the application. It provides a screen where users can add, view, and manage their todo items.",
      "class_diagram": "@startuml\nclass TodoView {\n  + build(context: BuildContext): Widget\n}\n\nclass TodoViewModel {\n  + todos: List<Todo>\n  + addTodo(String text): void\n  + toggleTodoCompletion(String id): void\n  + deleteTodo(String id): void\n}\n\nTodoView o-- TodoViewModel\nTodoViewModel o-- TodoService\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the Todo List screen, including an input field to add new todos, a list of existing todos, and controls to mark todos as complete or delete them.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/todo/todo_viewmodel.dart",
        "package:my_app/services/todo_service.dart",
        "package:my_app/models/todo.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoView\nparticipant TodoViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (counter, dialog, bottom sheet)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\nUser -> TodoView: Navigate to Todo List\nTodoView -> TodoViewModel: Initialize\nTodoView -> TodoViewModel: Add, toggle, delete todos\nTodoViewModel -> TodoService: Manage todo items\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. ViewModels (e.g., HomeViewModel, TodoViewModel) manage the state and business logic for their respective views. The ViewModels interact with Services (e.g., TodoService) and Repositories (e.g., TodoRepository) to handle data operations and state updates. Changes in the ViewModels are then reflected in the UI through the Stacked framework's reactive data binding.",
  "navigation_flow": "The application's navigation is handled by the Stacked Router, defined in app.router.dart. The main navigation flow is as follows:\n1. The app starts with the AppView, which initializes the Stacked architecture and displays the StartupView.\n2. After the startup logic is completed in the StartupViewModel, the user is navigated to the HomeView.\n3. From the HomeView, the user can navigate to the TodoView by tapping a button or menu item.\n4. The Stacked Router manages the transitions between these views, ensuring a consistent and reliable navigation experience."
}