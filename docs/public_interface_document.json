{
  "package_name": "com.example_org.my_app",
  "project_description": "The Flutter application is a Todo list management system that allows users to create, update, and delete todo items. It features a clean and intuitive user interface, with the ability to display todo lists, add new todos, toggle the completion status of existing todos, and delete todos. The application follows the Stacked architecture, utilizing Stacked for state management, routing, and dependency injection. It also includes support for displaying custom dialogs and bottom sheets.",
  "architecture_overview": "The application follows the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The main components include the AppView, StartupView, HomeView, and TodoView, each with their corresponding ViewModels. The application also features custom dialogs and bottom sheets, which are defined and registered in the app.dialogs.dart and app.bottomsheets.dart files.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This file is responsible for the main entry point and bootstrapping of the development version of the application. It sets up the initial configuration and initializes the app's root view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function to set up the app's initial state and render the `AppView` as the root widget.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "lib/main/bootstrap.dart",
        "lib/models/enums/flavor.dart",
        "lib/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system in the Flutter application. It defines a set of custom dialog types that can be used throughout the app and registers the corresponding dialog builders with the DialogService from the stacked_services package.",
      "class_diagram": "@startuml\nclass DialogService {\n  +registerCustomDialogBuilders(Map<DialogType, DialogBuilder> builders)\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n}\n\nenum DialogType {\n  infoAlert\n}\n\nDialogService --> DialogType\nDialogService --> InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Sets up the dialog system by registering the custom dialog builders with the DialogService. This allows the app to show various types of dialogs (e.g., InfoAlertDialog) throughout the application.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up the service locator, which is a central registry for managing and resolving dependencies in the application. It is part of the Stacked architecture, a popular state management and dependency injection pattern for Flutter applications.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method initializes the service locator by registering various services, such as the BottomSheetService, DialogService, and NavigationService. It allows these services to be accessed and used throughout the application.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is responsible for encapsulating the implementation of analytics tracking in the application. It serves as a wrapper around the underlying analytics solution, providing a consistent and reusable interface for logging various events and metrics.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n\nInitializableDependency <|-- AnalyticService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use within the application.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is a NavigatorObserver that tracks the screen views of the application using the AnalyticService. It is responsible for capturing user navigation events and reporting them to the analytics service, providing valuable insights into user behavior and app usage.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - _trackScreenView(Route<dynamic> route)\n}\n\nclass AnalyticService {\n  + trackScreen(String screenName)\n}\n\nScreenObserver --> AnalyticService : Sends screen view events\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigator stack, if it passes the default route filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a new route replaces an existing one on the navigator stack, if the new route passes the default route filter.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigator stack, if the previous route passes the default route filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Sends the screen view event to the AnalyticService, using the default name extractor to get the screen name.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/services/todo_repository.dart",
      "description": "The TodoRepository class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for a list of TodoModel objects. It serves as the central data access layer for the application's todo management functionality.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  -List<TodoModel> _todos\n  +Future<List<TodoModel>> getTodos()\n  +Future<void> addTodo(TodoModel todo)\n  +Future<void> updateTodo(TodoModel updatedTodo)\n  +Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of all todo items.",
          "parameters": null,
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list.",
          "parameters": [
            "TodoModel"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list.",
          "parameters": [
            "String"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "This Dart file provides the main business logic and functionality for managing todo items in the application. It acts as a service layer that interacts with the underlying todo repository to perform CRUD operations on todo items.",
      "class_diagram": "@startuml\nclass TodoService {\n  - TodoRepository _repository\n  - Uuid _uuid\n  + getTodos(): Future<List<TodoModel>>\n  + addTodo(String title): Future<void>\n  + toggleTodoStatus(TodoModel todo): Future<void>\n  + deleteTodo(String id): Future<void>\n  + updateTodoTitle(String id, String newTitle): Future<void>\n}\n\nTodoService --> TodoRepository\nTodoService --> TodoModel\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves a list of all todo items from the repository.",
          "parameters": [],
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the provided title and adds it to the repository.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Updates the completion status of the provided todo item in the repository.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes the todo item with the specified ID from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodoTitle",
          "description": "Updates the title of the todo item with the specified ID in the repository.",
          "parameters": [
            "String id",
            "String newTitle"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/models/todo_model.dart",
        "my_app/services/todo_repository.dart",
        "uuid/uuid.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is a ViewModel for a bottom sheet UI component that displays notices or alerts to the user.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class represents a single task or 'todo' item in a todo list application. It encapsulates the key properties of a todo item, including its unique identifier, title, completion status, and creation timestamp. This model class is responsible for managing the state and data related to individual todo items, providing a standardized data structure that can be used throughout the application.",
      "class_diagram": "@startuml\nclass TodoModel {\n  +String id\n  +String title\n  +bool isCompleted\n  +DateTime createdAt\n  +TodoModel copyWith({String? id, String? title, bool? isCompleted, DateTime? createdAt})\n}\n@enduml",
      "methods": [
        {
          "name": "TodoModel",
          "description": "The constructor for the TodoModel class, which initializes the required properties (id, title) and optionally sets the isCompleted and createdAt properties.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "copyWith",
          "description": "The copyWith method creates a new TodoModel instance with the provided updated property values, allowing for the modification of individual properties without creating a completely new instance.",
          "parameters": [
            "id",
            "title",
            "isCompleted",
            "createdAt"
          ],
          "return_type": "TodoModel"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It provides a centralized location for managing the application's color palette, promoting consistency and ease of maintenance.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines the `NoticeSheet` class, which is responsible for rendering a bottom sheet UI component that displays a notice or alert to the user. The bottom sheet contains a title, a description, and is used to present important information or updates to the user.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request, Key? key})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet --> NoticeSheetModel : uses\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class. It takes two required parameters: `completer` and `request`. `completer` is a callback function that is called when the bottom sheet is closed, and `request` is a `SheetRequest` object that contains the title and description to be displayed in the bottom sheet.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the `NoticeSheet`. It takes the `BuildContext`, the `NoticeSheetModel` instance, and an optional `Widget` parameter. It returns a `Widget` that represents the bottom sheet UI, which includes the title and description.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel` class, which is used to manage the state and logic of the `NoticeSheet`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\n  class InfoAlertDialogModel {\n  }\n  \n  InfoAlertDialogModel --|> BaseViewModel\n  @enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying an informative alert dialog to the user. This dialog is typically used to convey important information or updates to the user in a concise and visually appealing manner.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  + InfoAlertDialog(request: DialogRequest, completer: Function(DialogResponse))\n  + builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI of the InfoAlertDialog based on the provided DialogRequest and InfoAlertDialogModel.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_dialog/todo_dialog.dart",
      "description": "This file defines a `TodoDialog` widget, which is responsible for displaying a dialog box with a todo task's title and description, and allowing the user to confirm or cancel the task.",
      "class_diagram": "@startuml\nclass TodoDialog extends StatelessWidget {\n  +TodoDialog(request, completer)\n  +build(context): Widget\n}\n\nclass DialogRequest {\n  +title: String\n  +description: String\n}\n\nclass DialogResponse {\n  +confirmed: bool\n}\n\nTodoDialog --> DialogRequest\nTodoDialog --> DialogResponse\n@enduml",
      "methods": [
        {
          "name": "TodoDialog",
          "description": "Constructs a `TodoDialog` widget with a `DialogRequest` and a `completer` function.",
          "parameters": [
            "request",
            "completer"
          ],
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the UI for the `TodoDialog` widget, displaying the task's title and description, and providing 'Cancel' and 'OK' buttons to allow the user to interact with the dialog.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a set of UI helper functions and constants that assist in creating a consistent and responsive user interface in a Flutter application. It aims to simplify the layout and styling of UI elements, making it easier for developers to maintain a cohesive design across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const horizontalSpaceTiny: Widget\n  + static const horizontalSpaceSmall: Widget\n  + static const horizontalSpaceMedium: Widget\n  + static const horizontalSpaceLarge: Widget\n  + static const verticalSpaceTiny: Widget\n  + static const verticalSpaceSmall: Widget\n  + static const verticalSpaceMedium: Widget\n  + static const verticalSpaceLarge: Widget\n  + static const verticalSpaceMassive: Widget\n  + static const spacedDivider: Widget\n  + static verticalSpace(double height): Widget\n  + static screenWidth(BuildContext context): double\n  + static screenHeight(BuildContext context): double\n  + static screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + static screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + static halfScreenWidth(BuildContext context): double\n  + static thirdScreenWidth(BuildContext context): double\n  + static quarterScreenWidth(BuildContext context): double\n  + static getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + static getResponsiveSmallFontSize(BuildContext context): double\n  + static getResponsiveMediumFontSize(BuildContext context): double\n  + static getResponsiveLargeFontSize(BuildContext context): double\n  + static getResponsiveExtraLargeFontSize(BuildContext context): double\n  + static getResponsiveMassiveFontSize(BuildContext context): double\n  + static getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Retrieves the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height, optionally with an offset and maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Calculates a responsive horizontal space based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, associates them with specific views, and provides utility methods to navigate between those views.",
      "class_diagram": "@startuml\nclass StackedRouter {\n  + List<RouteDef> get routes\n  + Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass NavigatorStateExtension {\n  + Future<dynamic> navigateToHomeView()\n  + Future<dynamic> navigateToStartupView()\n  + Future<dynamic> replaceWithHomeView()\n  + Future<dynamic> replaceWithStartupView()\n}\n\nclass Routes {\n  + static const homeView\n  + static const startupView\n  + static const all\n}\n\nStackedRouter --> Routes\nNavigatorStateExtension --> StackedRouter\n@enduml",
      "methods": [
        {
          "name": "StackedRouter.routes",
          "description": "Returns the list of defined routes in the application.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "StackedRouter.pagesMap",
          "description": "Returns a map of route types to their corresponding page builders.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "NavigatorStateExtension.navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the application-level state and functionality within a Flutter/Dart application. It serves as the main viewmodel, coordinating the business logic and data flow between the UI and the underlying domain models.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void fetchInitialData()\n  +void signOut()\n}\n@enduml",
      "methods": [
        {
          "name": "fetchInitialData",
          "description": "Retrieves the initial data required to bootstrap the application, such as user information, settings, or other essential data.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "signOut",
          "description": "Logs the user out of the application, clearing any session data and navigating the user to the appropriate screen.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for displaying the initial startup screen of the application. It is the entry point for the user when the app is launched, providing a clean and consistent loading experience.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): StartupViewModel\n  +onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  +runStartupLogic(): void\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the startup screen, including the app name and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Initializes the `StartupViewModel` instance, which contains the application's startup logic.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is the main user interface for the home screen of the application. It is responsible for rendering the visual components, handling user interactions, and coordinating with the `HomeViewModel` to manage the application's state and business logic.",
      "class_diagram": "@startuml\nclass HomeView extends StackedView<HomeViewModel> {\n  + builder(BuildContext, HomeViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n  + counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including a title, a button to increment a counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to the `StackedView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "This file contains the HomeViewModel class, which is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for displaying a counter and allowing the user to interact with it through various UI elements.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  +String get counterLabel\n  +int _counter\n  +void incrementCounter()\n  +void showDialog()\n  +void showBottomSheet()\n}\n\nHomeViewModel -[hidden]-> DialogService\nHomeViewModel -[hidden]-> BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "get counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the updated state.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description, using the DialogService.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description, using the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for handling the initial startup logic of the application. It is part of the UI layer and is responsible for setting up the application's initial state and navigating to the appropriate view based on custom startup logic.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  - _navigationService: NavigationService\n  + runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for executing the application's startup logic. It delays for 3 seconds and then replaces the current view with the HomeView, effectively launching the application.",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time data, particularly for handling different date/time representations that may be encountered when interacting with external data sources such as a Firestore database.",
      "class_diagram": "@startuml\nclass DateUtil {\n  {static} DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic input value (e.g., Timestamp, String, DateTime) to a DateTime object, handling different date/time representations.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file defines a set of constants that are used throughout the application. It serves as a central repository for global configuration values, file paths, contact information, and default language options. The primary purpose of this file is to provide a consistent and easily accessible source of common application settings and metadata.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class in this file provides a set of utility functions for handling common contact-related actions within a Flutter application, such as launching the user's default email client or WhatsApp messaging app.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the user's default WhatsApp client and pre-populates the message with the provided phone number and (optional) text.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the user's default email client and pre-populates the recipient email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines an exception class for handling unwanted exceptions that may occur in the API service of the application. The main purpose of this class is to provide a standardized way of handling and reporting API-related errors.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  +final dynamic message\n  +toString(): String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the APIException class. It takes an optional `message` parameter to store the error message.",
          "parameters": [
            "dynamic message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the exception, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the `Color` class, allowing for easy conversion of hexadecimal color strings to `Color` objects. It also includes a method to extract the integer value of the hex color. This utility helps simplify the process of working with and manipulating colors in a Flutter application.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string to a `Color` object. If the input string is 6 characters long, it automatically prepends 'FF' to represent the alpha channel.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string to an integer value. If the input string is 6 characters long, it automatically prepends 'FF' to represent the alpha channel.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "The 'Flavors' class in this file is responsible for managing the current app flavor (development or production) and providing utility methods to check the active flavor. This allows the application to adapt its behavior and configuration based on the running environment.",
      "class_diagram": "@startuml\nclass Flavors {\n  - Flavors._()\n  + factory Flavors()\n  + static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class. This ensures that only a single instance of the class can be created.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "factory Flavors",
          "description": "Factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "flavor",
          "description": "Static property that stores the current app flavor (development or production).",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "isDev",
          "description": "Static getter that returns true if the current app flavor is development, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Static getter that returns true if the current app flavor is production, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The `JsonUtil` class is a utility for working with JSON data in a Flutter/Dart application. It provides a set of static methods to format and convert JSON data into strongly-typed objects, ensuring consistency and safety in handling JSON-based data structures.",
      "class_diagram": "@startuml\n  class JsonUtil {\n    + static Map<String, dynamic> formatMap(Map<dynamic, dynamic> json)\n    + static T? fromJsonOrNull<T>(dynamic json, T Function(Map<String, dynamic>) fromJson)\n    + static List<T> formatListMap<T>(List<dynamic> json, T Function(Map<String, dynamic>) fromJson)\n  }\n  @enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a map with dynamic keys and values into a map with string keys and dynamic values, removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts a dynamic JSON value into a strongly-typed object of type `T`, returning `null` if the JSON is null or not a map.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a list of dynamic JSON maps into a list of strongly-typed objects of type `T`, using the provided `fromJson` function to convert each map.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "The `bootstrap.dart` file is responsible for setting up and bootstrapping the Flutter application. It handles the initialization of the app's environment, registering important services and dependencies, and running the main application widget.",
      "class_diagram": "```plantuml\nclass BootstrapFunction {\n    + Future<void> bootstrap({\n        required FutureOr<Widget> Function() builder,\n        required Flavor flavor\n    })\n}\n```",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point of the file, which initializes the app's environment, sets up essential services, and runs the main application widget.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file serves as a central export point for the localization functionality of the application. It provides an abstraction layer over the generated `app_localizations.dart` file, as well as access to supported locales and a convenience extension method.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the custom bottom sheet UI for the application. It defines the different types of bottom sheets that can be displayed and registers them with the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  + NoticeSheet(request, completer)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetType --> NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Registers the custom bottom sheet builders with the BottomSheetService. This allows the application to display different types of bottom sheets, such as the NoticeSheet, when requested.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the supported locales and localization delegates for the application. It provides a central location to define and access the supported languages and associated translations.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Provides a list of the localization delegates used by the application to handle translations.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Provides a list of the locales supported by the application.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_view.dart",
      "description": "The TodoView class is responsible for rendering the user interface of a Todo application. It provides a visual representation of the user's todo items, allowing them to add new tasks, mark tasks as completed, and delete tasks. The class is built using the Stacked architecture, which separates the UI from the business logic.",
      "class_diagram": "@startuml\nclass TodoView {\n  +Widget build(BuildContext)\n}\n\nclass TodoViewModel {\n  +initialize()\n  +addTodo(String)\n  +toggleTodoStatus(Todo)\n  +deleteTodo(int)\n  +List<Todo> todos\n  +bool isBusy\n}\n\nTodoView --> TodoViewModel\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoView UI, including the input field for adding new todos, the list of todos, and the checkbox/delete functionality for each todo item.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "my_app/app/app.locator.dart",
        "my_app/features/todo/todo_viewmodel.dart",
        "my_app/services/todo_service.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file provides an extension on the `BuildContext` class to make it easier to access the `AppLocalizations` instance, which is responsible for handling the localization and internationalization of the application.",
      "class_diagram": "@startuml\nclass BuildContext {\n}\n\nclass AppLocalizations {\n  static AppLocalizations of(BuildContext context)\n}\n\nBuildContext <|-- LocalizationsX\nLocalizationsX : localizations\n@enduml",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current `AppLocalizations` instance for the given `BuildContext`.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_item.dart",
      "description": "This Dart file defines a TodoItem widget, which represents an individual todo item in a todo list. The TodoItem widget is responsible for displaying a todo item, allowing the user to toggle its completion status, edit its title, and delete it.",
      "class_diagram": "@startuml\nclass TodoItem extends StatelessWidget {\n  TodoModel todo\n  Function(TodoModel) onToggle\n  Function(String) onDelete\n  Function(String, String) onUpdate\n  build(BuildContext): Widget\n}\n\nclass _EditTodoDialog extends StatefulWidget {\n  String initialTitle\n  _EditTodoDialogState createState()\n}\n\nclass _EditTodoDialogState extends State<_EditTodoDialog> {\n  TextEditingController _controller\n  initState()\n  dispose()\n  build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the TodoItem widget, which includes a Dismissible widget for swiping to delete, a Checkbox for toggling the todo's completion status, and a ListTile for displaying the todo's title and creation date. It also handles the long-press gesture to edit the todo's title.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "createState",
          "description": "Creates the state object for the _EditTodoDialog widget.",
          "parameters": null,
          "return_type": "_EditTodoDialogState"
        },
        {
          "name": "initState",
          "description": "Initializes the TextEditingController for the _EditTodoDialog widget.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "dispose",
          "description": "Disposes of the TextEditingController for the _EditTodoDialog widget.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "build",
          "description": "Builds the _EditTodoDialog widget, which displays an AlertDialog with a TextField for editing the todo's title.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class represents the main application view in the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and screen observation functionality.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n_App o-- AppViewModel\n_App o-- StackedRouter\n_App o-- StackedService\n_App o-- ScreenObserver\n_App o-- localizationsDelegates\n_App o-- supportedLocales\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application UI, including setting up the navigation, localization, and screen observation functionality.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_list.dart",
      "description": "The `TodoList` class is responsible for rendering a list of todo items, allowing users to toggle their completion status, delete them, and update their content. It serves as the main interface for displaying and managing the todo list within the application.",
      "class_diagram": "@startuml\nclass TodoList {\n  -List<TodoModel> todos\n  -Function(TodoModel) onToggle\n  -Function(String) onDelete\n  -Function(String, String) onUpdate\n  +build(BuildContext): Widget\n}\n\nclass TodoItem {\n  -TodoModel todo\n  -Function(TodoModel) onToggle\n  -Function(String) onDelete\n  -Function(String, String) onUpdate\n  +build(BuildContext): Widget\n}\n\nTodoList *--> TodoItem\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoList widget, rendering a ListView of TodoItem widgets.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/models/todo_model.dart",
        "my_app/features/todo/widgets/todo_item.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file provides the configuration options for the Firebase services used in the development environment of the application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_auth",
        "cloud_firestore"
      ]
    },
    {
      "name": "lib/features/todo/widgets/todo_input.dart",
      "description": "The `TodoInput` widget is responsible for providing a user interface for adding new todo items. It allows the user to enter a new todo item and submit it to the application's business logic.",
      "class_diagram": "@startuml\nclass TodoInput {\n  -TextEditingController controller\n  +Function(String) onSubmit\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the TodoInput widget, including a text field for entering the todo item and a button to submit it.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_viewmodel.dart",
      "description": "The TodoViewModel class is the main view model responsible for managing the state and functionality of a Todo list application. It provides the core logic for creating, updating, and deleting todos, as well as loading the existing todo items.",
      "class_diagram": "@startuml\nclass TodoViewModel {\n  + initialize(): Future<void>\n  + loadTodos(): Future<void>\n  + addTodo(String title): Future<void>\n  + toggleTodoStatus(TodoModel todo): Future<void>\n  + deleteTodo(String id): Future<void>\n  + updateTodoTitle(String id, String newTitle): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the view model by loading the existing todo items.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todo items from the TodoService and updates the view model's todos property.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Creates a new todo item with the provided title and adds it to the list of todos.",
          "parameters": [
            "String title"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Updates the status (completed/not completed) of the provided TodoModel instance.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes the todo item with the specified ID from the list of todos.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodoTitle",
          "description": "Updates the title of the todo item with the specified ID.",
          "parameters": [
            "String id",
            "String newTitle"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/models/todo_model.dart",
        "package:my_app/services/todo_service.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` that represents the different flavors or build configurations of the application. It provides a way to distinguish between the production and development environments.",
      "class_diagram": "@startuml\nclass Flavor {\n  + production\n  + development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the main production entry point of the Flutter application. It sets up the necessary infrastructure and configurations for the app to run in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the bootstrap function to initialize the app with the appropriate configurations for the production environment.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/todo/todo_repository.dart",
      "description": "This Dart file defines a TodoRepository class, which is responsible for managing the persistent storage and retrieval of todo items in the application. It provides a set of methods to perform CRUD (Create, Read, Update, Delete) operations on the todo list.",
      "class_diagram": "@startuml\nclass TodoRepository {\n  - List<TodoModel> _todos\n  + Future<List<TodoModel>> getTodos()\n  + Future<void> addTodo(TodoModel todo)\n  + Future<void> updateTodo(TodoModel updatedTodo)\n  + Future<void> deleteTodo(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the current list of todo items.",
          "parameters": null,
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list.",
          "parameters": [
            "TodoModel updatedTodo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "lib/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file defines the Firebase configuration options for the production environment of the application. It provides the necessary parameters to initialize and connect the Flutter app with the Firebase backend services.",
      "class_diagram": "",
      "methods": [
        {
          "name": "firebase_options",
          "description": "Provides the Firebase configuration options for the production environment.",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoView\nparticipant TodoViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate to home\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact with todo list\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoView: Display todo list\nUser -> TodoView: Add/toggle/delete todo\nTodoView -> TodoViewModel: Perform CRUD operations\nTodoViewModel -> TodoRepository: Interact with todo data\nTodoRepository -> TodoView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view (e.g., HomeView, TodoView) has a corresponding ViewModel (e.g., HomeViewModel, TodoViewModel) that handles the business logic and state for that view. The ViewModels interact with various services, such as the TodoService and AnalyticService, to manage the application's state and data. The state is then passed back to the views, which rebuild their UI to reflect the updated state.",
  "navigation_flow": "The navigation flow is managed using the Stacked Router, defined in the app.router.dart file. The main entry point of the application is the AppView, which initializes the Stacked architecture and sets up the navigation. The StartupView is displayed first, and once the startup logic is completed, the application navigates to the HomeView. From the HomeView, users can access the TodoView, which displays the todo list. Navigation between the views is handled by the Stacked Router, which provides utility methods for pushing, popping, and replacing routes."
}